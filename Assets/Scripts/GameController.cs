using System.Collections;using System.Collections.Generic;using UnityEngine;using UnityEngine.SceneManagement;public class GameController : MonoBehaviour{    public enum GameStates    {        GamePause,        FreePlay,        Auction,        PlaceLoser,        GameVictory,        GameDefeat    }    public static float PLAYER_RADIUS = 0.5f;    private static float MIN_CAMERA_SIZE = 5;    private static float MAX_CAMERA_SIZE = 20;    public static GameController instance = null;    private Sprite[] dungeonSpriteSheet;    public AudioSource backgroundMusic;    public AudioSource enterAltarSfx;
    public AudioSource gameOverSfx;
    public AudioSource gameStartSfx;
    public AudioSource loseAuctionSfx;    public GameObject playerPrefab;    public GameObject player1;    public GameObject player2;    public GameObject placementGhostPrefab;    private GameObject placementGhost;    public GameObject placementCirclePrefab;    private GameObject placementCircle;    private float auctionStart;    private float placeLoserStart;    public bool player1Won;    public bool player2Won;    public bool beginAuction;    // Publics to monitor GameState    public GameStates currentState;    private GameStates savedState;    // Start is called before the first frame update    void Start()    {        if (instance == null)            instance = this;        else if (instance != this)            Destroy(gameObject);        Camera.main.gameObject.AddComponent(typeof(CompleteCameraController));         dungeonSpriteSheet = Resources.LoadAll<Sprite>("dungeon_tiles");
        player1 = Instantiate(playerPrefab, new Vector3(-33f, 13.0f, 0), Quaternion.identity);        Camera.main.gameObject.GetComponent<CompleteCameraController>().player = player1;        backgroundMusic.Play(0);        player2 = Instantiate(playerPrefab, new Vector3(34, -15f, 0), Quaternion.identity);        player2.GetComponent<SpriteRenderer>().sprite = dungeonSpriteSheet[30];        player2.GetComponent<Pathfinding.AIPath>().enabled = true;
        //player2.GetComponent<Pathfinding.AIPath>().destination = new Vector3(33.5f, 15.6f, 0);
        //player2.GetComponent<Pathfinding.AIPath>().destination = new Vector3(-52.6f, 5.11f, 0);
        player2.GetComponent<Pathfinding.AIPath>().destination = new Vector3(0, 0, 0);        currentState = GameStates.FreePlay;        HandlePauseUnpause();    }    // Update is called once per frame    void Update()    {        var oldState = currentState;        currentState = HandlePauseUnpause();        currentState = InitFreePlay();        currentState = InitAuction();        currentState = InitPlaceLoser();        currentState = InitGameOver();
        //If there's any global logic that needs to be handled for these, go ahead and do it.
        if (Input.GetKeyDown(KeyCode.L))
        {
            SceneManager.LoadScene(SceneManager.GetActiveScene().name);
        }        if (currentState == oldState)        {            if (currentState == GameStates.FreePlay)            {                Camera.main.orthographicSize = Mathf.Max(Camera.main.orthographicSize - 1, MIN_CAMERA_SIZE);            }            else if (currentState == GameStates.Auction)            {                //DoAuction();            }            else if (currentState == GameStates.PlaceLoser)            {                Camera.main.orthographicSize = Mathf.Min(Camera.main.orthographicSize + 1, MAX_CAMERA_SIZE);            }        }    }    GameStates HandlePauseUnpause()
    {
        if (currentState == GameStates.GamePause &&
            !MenuToggle.Instance.StartScreen.activeSelf)
        {
            Time.timeScale = 1;
            currentState = savedState;
            gameStartSfx.Play();        } else if (currentState != GameStates.GamePause &&
            MenuToggle.Instance.StartScreen.activeSelf)
        {
            Time.timeScale = 0;
            savedState = currentState;
            currentState = GameStates.GamePause;
        }
        return currentState;
    }    GameStates InitFreePlay()    {        if (currentState == GameStates.PlaceLoser &&             Time.time - placeLoserStart > 3 /*OR player presses done button?*/)        {            if (placementGhost != null)            {                GameObject playerToPlace;                if (player1Won)                    playerToPlace = player2;                else                    playerToPlace = player1;                Pathfinding.NNInfo nearest = AstarPath.active.GetNearest(placementGhost.transform.position);                playerToPlace.transform.position = nearest.position;                Destroy(placementGhost);                Destroy(placementCircle);            }            return GameStates.FreePlay;        }        return currentState;    }    GameStates InitAuction()    {        if (currentState == GameStates.FreePlay &&
            beginAuction)        {            beginAuction = false;            CompleteAltarController.Instance.numHits = 0;            MenuToggle.Instance.auctionActive = true;            auctionStart = Time.time;            player1.GetComponent<Rigidbody2D>().velocity = Vector2.zero;            player2.GetComponent<Rigidbody2D>().velocity = Vector2.zero;            player2.GetComponentInChildren<BiddingBar>().currentBid = player2.GetComponentInChildren<HealthBar>().currentHealth / 2;            player1.GetComponentInChildren<BiddingBar>().currentBid = player1.GetComponentInChildren<HealthBar>().currentHealth / 2;            enterAltarSfx.Play(0);            return GameStates.Auction;        }        return currentState;    }    GameStates InitPlaceLoser()    {        if (currentState == GameStates.Auction &&             Time.time - auctionStart >= 6 /*OR player presses done button?*/)        {            MenuToggle.Instance.auctionActive = false;            var player1Bid = player1.GetComponentInChildren<BiddingBar>().currentBid;            var player2Bid = player2.GetComponentInChildren<BiddingBar>().currentBid;            player1Won = player1Bid > player2Bid;            player2Won = player1Bid < player2Bid;            placeLoserStart = Time.time;            placementCircle = Instantiate(placementCirclePrefab, player1.transform.position, Quaternion.identity);            var desiredCircleRadius = 100; // Note: This value was changed            placementCircle.GetComponent<CircleBoundsEnforcer>().circleRadius = Mathf.Clamp(desiredCircleRadius, 5, 30);            placementGhost = Instantiate(placementGhostPrefab, placementCircle.transform);            placementGhost.GetComponent<Rigidbody2D>().velocity = new Vector2(0, 1);            if (player1Won)            {                MenuToggle.Instance.ShowAuctionWinnerText();                placementGhost.GetComponent<SpriteRenderer>().sprite = dungeonSpriteSheet[30];                player1.GetComponentInChildren<HealthBar>().currentHealth -= player1Bid;                player2.GetComponentInChildren<HealthBar>().currentHealth += player1Bid + player2Bid + 6; // 6 to make up for the auction time
            }            else             {                MenuToggle.Instance.ShowAuctionLoserText();                player1.GetComponentInChildren<HealthBar>().currentHealth += player1Bid + player2Bid + 6;                 player2.GetComponentInChildren<HealthBar>().currentHealth -= player2Bid;                loseAuctionSfx.Play(0);            }            MenuToggle.Instance.UpdatePlayerScores();            player1.GetComponentInChildren<BiddingBar>().currentBid = 0;            player2.GetComponentInChildren<BiddingBar>().currentBid = 0;            return GameStates.PlaceLoser;        }        return currentState;    }    GameStates InitGameOver()
    {
        if (currentState == GameStates.FreePlay &&
            (MenuToggle.Instance.timer >= MenuToggle.GAME_DURATION ||  // Timed out
            player1.GetComponentInChildren<HealthBar>().currentHealth <= 0.0f ||  // Or player 1 died
            player2.GetComponentInChildren<HealthBar>().currentHealth <= 0.0f))  // Or player 2 died
        {
            currentState = player1.GetComponent<CompletePlayerController>().currentScore > player2.GetComponentInChildren<CompletePlayerController>().currentScore ? GameStates.GameVictory : GameStates.GameDefeat;
            gameOverSfx.Play();
        }
        return currentState;
    }}