using UnityEngine;using System.Collections;public class MenuToggle : MonoBehaviour{    public static float GAME_DURATION = 100;    public static MenuToggle Instance;    private Canvas CanvasObject; // Assign in inspector    public GameObject StartScreen;    public GameObject AuctionScreen;    public GameObject ScrollBackground;    public GameObject VictoryScreen;    public GameObject DefeatScreen;    private GameObject HUD;    private GameObject TimeValue;    private GameObject Player1Life;    private GameObject Player2Life;    private GameObject Player1Score;    private GameObject Player2Score;    private GameObject AuctionWinnerText;    private GameObject AuctionLoserText;    private GameObject CurrentBid;    private bool titleActive = true;    private bool HUDActive = false;    public bool auctionActive = false;    public float timer = 0.0f;    private string timeText;    private int newTimerValue = 1;    void Start()    {        Instance = this;        CanvasObject = GetComponent<Canvas>();        StartScreen = GameObject.Find("StartScreen");        ScrollBackground = GameObject.Find("ScrollBackground");        AuctionScreen = GameObject.Find("AuctionScreen");        TimeValue = GameObject.Find("TimeValue");        Player1Life = GameObject.Find("Player1Life");        Player2Life = GameObject.Find("Player2Life");        Player1Score = GameObject.Find("Player1Score");        Player2Score = GameObject.Find("Player2Score");        AuctionWinnerText = GameObject.Find("AuctionWinnerText");        AuctionLoserText = GameObject.Find("AuctionLoserText");        HUD = GameObject.Find("HUD");        HUD.SetActive(HUDActive);        CurrentBid = GameObject.Find("CurrentBid");        AuctionScreen.SetActive(false);        AuctionWinnerText.SetActive(false);        AuctionLoserText.SetActive(false);        VictoryScreen = GameObject.Find("VictoryScreen");        VictoryScreen.SetActive(false);        DefeatScreen = GameObject.Find("DefeatScreen");        DefeatScreen.SetActive(false);    }    void Update()    {        Debug.Log(GameController.instance.currentState);        if (HUDActive && GameController.instance.currentState == GameController.GameStates.FreePlay)        {            UpdateGameClock();            AuctionWinnerText.SetActive(false);            AuctionLoserText.SetActive(false);            AuctionScreen.SetActive(false);        }        if (GameController.instance.currentState == GameController.GameStates.GameDefeat)        {            UpdatePlayerScores();            AuctionWinnerText.SetActive(false);            AuctionLoserText.SetActive(false);            DefeatScreen.SetActive(true);        }        if (GameController.instance.currentState == GameController.GameStates.GameVictory)        {            UpdatePlayerScores();            AuctionWinnerText.SetActive(false);            AuctionLoserText.SetActive(false);            VictoryScreen.SetActive(true);        }        if (GameController.instance.currentState == GameController.GameStates.Auction)        {            ScrollBackground.SetActive(true);            AuctionScreen.SetActive(true);        }        if (GameController.instance.currentState == GameController.GameStates.PlaceLoser)        {            UpdatePlayerScores();            AuctionScreen.SetActive(false);        }        if (Input.GetKeyUp(KeyCode.Escape))        {            titleActive = !titleActive;            HUDActive = !HUDActive;            StartScreen.SetActive(titleActive);            HUD.SetActive(HUDActive);        }    }    public void ShowAuctionWinnerText()
    {            AuctionWinnerText.SetActive(true);            ScrollBackground.SetActive(false);            AuctionScreen.SetActive(false);    }    public void ShowAuctionLoserText()    {            AuctionLoserText.SetActive(true);            ScrollBackground.SetActive(false);            AuctionScreen.SetActive(false);    }    void UpdateGameClock()    {        timer += Time.deltaTime;        if ((int)timer != (int)newTimerValue)        {            newTimerValue = (int)timer;            UpdatePlayerLife();        }        float newTime = Mathf.Max(GAME_DURATION - timer, 0);        int timeInt = (int)newTime;        TimeValue.GetComponent<UnityEngine.UI.Text>().text = timeInt.ToString();    }    void UpdatePlayerLife()    {        // Update player 1's life        float player1CurrentHealth = GameController.instance.player1.GetComponentInChildren<HealthBar>().currentHealth;        int player1CurrentHealthInt = (int)player1CurrentHealth;        Player1Life.GetComponent<UnityEngine.UI.Text>().text = player1CurrentHealthInt.ToString();        // Update player 2's life        float player2CurrentHealth = GameController.instance.player2.GetComponentInChildren<HealthBar>().currentHealth;        int player2CurrentHealthInt = (int)player2CurrentHealth;        Player2Life.GetComponent<UnityEngine.UI.Text>().text = player2CurrentHealthInt.ToString();    }    public void UpdatePlayerScores()    {        // Update player 1's score        float player1CurrentScore = GameController.instance.player1.GetComponentInChildren<CompletePlayerController>().currentScore;        int player1CurrentScoreInt = (int)player1CurrentScore;        Player1Score.GetComponent<UnityEngine.UI.Text>().text = player1CurrentScoreInt.ToString();        // Update player 2's score        float player2CurrentScore = GameController.instance.player2.GetComponentInChildren<CompletePlayerController>().currentScore;        int player2CurrentScoreInt = (int)player2CurrentScore;        Player2Score.GetComponent<UnityEngine.UI.Text>().text = player2CurrentScoreInt.ToString();    }    public void UpdateCurrentBid()
    {
        float player1CurrentBid = GameController.instance.player1.GetComponentInChildren<BiddingBar>().currentBid;        int player1CurrentBidInt = (int)player1CurrentBid;        CurrentBid.GetComponent<UnityEngine.UI.Text>().text = player1CurrentBidInt.ToString();
    }}